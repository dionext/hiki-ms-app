/*
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dionext.wikibase.client.api;

import com.dionext.wikibase.client.ApiCallback;
import com.dionext.wikibase.client.ApiClient;
import com.dionext.wikibase.client.ApiException;
import com.dionext.wikibase.client.ApiResponse;
import com.dionext.wikibase.client.Configuration;
import com.dionext.wikibase.client.Pair;

import com.google.gson.reflect.TypeToken;


import com.dionext.wikibase.client.model.AddItemStatement201Response;
import com.dionext.wikibase.client.model.AddItemStatementRequest;
import com.dionext.wikibase.client.model.DeleteSitelinkRequest;
import com.dionext.wikibase.client.model.GetItemStatements200ResponseValueInner;
import com.dionext.wikibase.client.model.PatchItemRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addItemStatement
     * @param itemId The ID of the required Item (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * Location - The URI of the newly created Statement <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addItemStatementCall(String itemId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addItemStatementRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/statements"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemStatementValidateBeforeCall(String itemId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling addItemStatement(Async)");
        }

        // verify the required parameter 'addItemStatementRequest' is set
        if (addItemStatementRequest == null) {
            throw new ApiException("Missing the required parameter 'addItemStatementRequest' when calling addItemStatement(Async)");
        }

        return addItemStatementCall(itemId, addItemStatementRequest, ifMatch, ifUnmodifiedSince, ifNoneMatch, _callback);

    }

    /**
     * Add a new Statement to an Item
     * 
     * @param itemId The ID of the required Item (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * Location - The URI of the newly created Statement <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response addItemStatement(String itemId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = addItemStatementWithHttpInfo(itemId, addItemStatementRequest, ifMatch, ifUnmodifiedSince, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Add a new Statement to an Item
     * 
     * @param itemId The ID of the required Item (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * Location - The URI of the newly created Statement <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> addItemStatementWithHttpInfo(String itemId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = addItemStatementValidateBeforeCall(itemId, addItemStatementRequest, ifMatch, ifUnmodifiedSince, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new Statement to an Item (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * Location - The URI of the newly created Statement <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addItemStatementAsync(String itemId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemStatementValidateBeforeCall(itemId, addItemStatementRequest, ifMatch, ifUnmodifiedSince, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addPropertyStatement
     * @param propertyId The ID of the required Property (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * Location - The URI of the newly created Statement <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyStatementCall(String propertyId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addItemStatementRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/statements"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPropertyStatementValidateBeforeCall(String propertyId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling addPropertyStatement(Async)");
        }

        // verify the required parameter 'addItemStatementRequest' is set
        if (addItemStatementRequest == null) {
            throw new ApiException("Missing the required parameter 'addItemStatementRequest' when calling addPropertyStatement(Async)");
        }

        return addPropertyStatementCall(propertyId, addItemStatementRequest, ifMatch, ifUnmodifiedSince, ifNoneMatch, _callback);

    }

    /**
     * Add a new Statement to a Property
     * 
     * @param propertyId The ID of the required Property (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * Location - The URI of the newly created Statement <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response addPropertyStatement(String propertyId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = addPropertyStatementWithHttpInfo(propertyId, addItemStatementRequest, ifMatch, ifUnmodifiedSince, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Add a new Statement to a Property
     * 
     * @param propertyId The ID of the required Property (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * Location - The URI of the newly created Statement <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> addPropertyStatementWithHttpInfo(String propertyId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = addPropertyStatementValidateBeforeCall(propertyId, addItemStatementRequest, ifMatch, ifUnmodifiedSince, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new Statement to a Property (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * Location - The URI of the newly created Statement <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyStatementAsync(String propertyId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, String ifUnmodifiedSince, List<String> ifNoneMatch, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPropertyStatementValidateBeforeCall(propertyId, addItemStatementRequest, ifMatch, ifUnmodifiedSince, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItemStatement
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemStatementCall(String itemId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSitelinkRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/statements/{statement_id}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemStatementValidateBeforeCall(String itemId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteItemStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling deleteItemStatement(Async)");
        }

        return deleteItemStatementCall(itemId, statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, _callback);

    }

    /**
     * Delete a single Statement from an Item
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String deleteItemStatement(String itemId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        ApiResponse<String> localVarResp = deleteItemStatementWithHttpInfo(itemId, statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a single Statement from an Item
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteItemStatementWithHttpInfo(String itemId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteItemStatementValidateBeforeCall(itemId, statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a single Statement from an Item (asynchronously)
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemStatementAsync(String itemId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemStatementValidateBeforeCall(itemId, statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePropertyStatement
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyStatementCall(String propertyId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSitelinkRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/statements/{statement_id}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyStatementValidateBeforeCall(String propertyId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling deletePropertyStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling deletePropertyStatement(Async)");
        }

        return deletePropertyStatementCall(propertyId, statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, _callback);

    }

    /**
     * Delete a single Statement from a Property
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String deletePropertyStatement(String propertyId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        ApiResponse<String> localVarResp = deletePropertyStatementWithHttpInfo(propertyId, statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a single Statement from a Property
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> deletePropertyStatementWithHttpInfo(String propertyId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyStatementValidateBeforeCall(propertyId, statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a single Statement from a Property (asynchronously)
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyStatementAsync(String propertyId, String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyStatementValidateBeforeCall(propertyId, statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStatement
     * @param statementId The ID of a Statement (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStatementCall(String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSitelinkRequest;

        // create path and map variables
        String localVarPath = "/statements/{statement_id}"
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStatementValidateBeforeCall(String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling deleteStatement(Async)");
        }

        return deleteStatementCall(statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, _callback);

    }

    /**
     * Delete a single Statement
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String deleteStatement(String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        ApiResponse<String> localVarResp = deleteStatementWithHttpInfo(statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a single Statement
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteStatementWithHttpInfo(String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteStatementValidateBeforeCall(statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a single Statement (asynchronously)
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStatementAsync(String statementId, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStatementValidateBeforeCall(statementId, ifMatch, ifNoneMatch, ifUnmodifiedSince, deleteSitelinkRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemStatement
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemStatementCall(String itemId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/statements/{statement_id}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemStatementValidateBeforeCall(String itemId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling getItemStatement(Async)");
        }

        return getItemStatementCall(itemId, statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a single Statement from an Item
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response getItemStatement(String itemId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = getItemStatementWithHttpInfo(itemId, statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single Statement from an Item
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> getItemStatementWithHttpInfo(String itemId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getItemStatementValidateBeforeCall(itemId, statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single Statement from an Item (asynchronously)
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemStatementAsync(String itemId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemStatementValidateBeforeCall(itemId, statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemStatements
     * @param itemId The ID of the required Item (required)
     * @param property Single Property ID to filter Statements by. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Statements of an Item </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemStatementsCall(String itemId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/statements"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (property != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("property", property));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemStatementsValidateBeforeCall(String itemId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemStatements(Async)");
        }

        return getItemStatementsCall(itemId, property, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve Statements from an Item
     * 
     * @param itemId The ID of the required Item (required)
     * @param property Single Property ID to filter Statements by. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return Map&lt;String, List&lt;GetItemStatements200ResponseValueInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Statements of an Item </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, List<GetItemStatements200ResponseValueInner>> getItemStatements(String itemId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<Map<String, List<GetItemStatements200ResponseValueInner>>> localVarResp = getItemStatementsWithHttpInfo(itemId, property, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve Statements from an Item
     * 
     * @param itemId The ID of the required Item (required)
     * @param property Single Property ID to filter Statements by. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;GetItemStatements200ResponseValueInner&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Statements of an Item </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<GetItemStatements200ResponseValueInner>>> getItemStatementsWithHttpInfo(String itemId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getItemStatementsValidateBeforeCall(itemId, property, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<Map<String, List<GetItemStatements200ResponseValueInner>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Statements from an Item (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param property Single Property ID to filter Statements by. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Statements of an Item </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemStatementsAsync(String itemId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<Map<String, List<GetItemStatements200ResponseValueInner>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemStatementsValidateBeforeCall(itemId, property, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<GetItemStatements200ResponseValueInner>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyStatement
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyStatementCall(String propertyId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/statements/{statement_id}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyStatementValidateBeforeCall(String propertyId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getPropertyStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling getPropertyStatement(Async)");
        }

        return getPropertyStatementCall(propertyId, statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a single Statement from a Property
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response getPropertyStatement(String propertyId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = getPropertyStatementWithHttpInfo(propertyId, statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single Statement from a Property
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> getPropertyStatementWithHttpInfo(String propertyId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPropertyStatementValidateBeforeCall(propertyId, statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single Statement from a Property (asynchronously)
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyStatementAsync(String propertyId, String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyStatementValidateBeforeCall(propertyId, statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyStatements
     * @param propertyId The ID of the required Property (required)
     * @param property Single Property ID to filter Statements by. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Statements of a Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyStatementsCall(String propertyId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/statements"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (property != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("property", property));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyStatementsValidateBeforeCall(String propertyId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getPropertyStatements(Async)");
        }

        return getPropertyStatementsCall(propertyId, property, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve Statements from a Property
     * 
     * @param propertyId The ID of the required Property (required)
     * @param property Single Property ID to filter Statements by. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return Map&lt;String, List&lt;AddItemStatement201Response&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Statements of a Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, List<AddItemStatement201Response>> getPropertyStatements(String propertyId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<Map<String, List<AddItemStatement201Response>>> localVarResp = getPropertyStatementsWithHttpInfo(propertyId, property, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve Statements from a Property
     * 
     * @param propertyId The ID of the required Property (required)
     * @param property Single Property ID to filter Statements by. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;AddItemStatement201Response&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Statements of a Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<AddItemStatement201Response>>> getPropertyStatementsWithHttpInfo(String propertyId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPropertyStatementsValidateBeforeCall(propertyId, property, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<Map<String, List<AddItemStatement201Response>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Statements from a Property (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param property Single Property ID to filter Statements by. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Statements of a Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyStatementsAsync(String propertyId, String property, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<Map<String, List<AddItemStatement201Response>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyStatementsValidateBeforeCall(propertyId, property, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<AddItemStatement201Response>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatement
     * @param statementId The ID of a Statement (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getStatementCall(String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statements/{statement_id}"
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatementValidateBeforeCall(String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling getStatement(Async)");
        }

        return getStatementCall(statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a single Statement
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response getStatement(String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = getStatementWithHttpInfo(statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single Statement
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> getStatementWithHttpInfo(String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getStatementValidateBeforeCall(statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single Statement (asynchronously)
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getStatementAsync(String statementId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatementValidateBeforeCall(statementId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchItemStatement
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchItemStatementCall(String itemId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchItemRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/statements/{statement_id}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchItemStatementValidateBeforeCall(String itemId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling patchItemStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling patchItemStatement(Async)");
        }

        // verify the required parameter 'patchItemRequest' is set
        if (patchItemRequest == null) {
            throw new ApiException("Missing the required parameter 'patchItemRequest' when calling patchItemStatement(Async)");
        }

        return patchItemStatementCall(itemId, statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Change elements of a single Statement of an Item
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response patchItemStatement(String itemId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = patchItemStatementWithHttpInfo(itemId, statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Change elements of a single Statement of an Item
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> patchItemStatementWithHttpInfo(String itemId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = patchItemStatementValidateBeforeCall(itemId, statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change elements of a single Statement of an Item (asynchronously)
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchItemStatementAsync(String itemId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchItemStatementValidateBeforeCall(itemId, statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPropertyStatement
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPropertyStatementCall(String propertyId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchItemRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/statements/{statement_id}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPropertyStatementValidateBeforeCall(String propertyId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling patchPropertyStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling patchPropertyStatement(Async)");
        }

        // verify the required parameter 'patchItemRequest' is set
        if (patchItemRequest == null) {
            throw new ApiException("Missing the required parameter 'patchItemRequest' when calling patchPropertyStatement(Async)");
        }

        return patchPropertyStatementCall(propertyId, statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Change elements of a single Statement of a Property
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response patchPropertyStatement(String propertyId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = patchPropertyStatementWithHttpInfo(propertyId, statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Change elements of a single Statement of a Property
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> patchPropertyStatementWithHttpInfo(String propertyId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = patchPropertyStatementValidateBeforeCall(propertyId, statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change elements of a single Statement of a Property (asynchronously)
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;.
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPropertyStatementAsync(String propertyId, String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPropertyStatementValidateBeforeCall(propertyId, statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchStatement
     * @param statementId The ID of a Statement (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchStatementCall(String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchItemRequest;

        // create path and map variables
        String localVarPath = "/statements/{statement_id}"
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchStatementValidateBeforeCall(String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling patchStatement(Async)");
        }

        // verify the required parameter 'patchItemRequest' is set
        if (patchItemRequest == null) {
            throw new ApiException("Missing the required parameter 'patchItemRequest' when calling patchStatement(Async)");
        }

        return patchStatementCall(statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Change elements of a single Statement
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response patchStatement(String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = patchStatementWithHttpInfo(statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Change elements of a single Statement
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> patchStatementWithHttpInfo(String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = patchStatementValidateBeforeCall(statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change elements of a single Statement (asynchronously)
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to the Statement and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Statement </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchStatementAsync(String statementId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchStatementValidateBeforeCall(statementId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceItemStatement
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceItemStatementCall(String itemId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addItemStatementRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/statements/{statement_id}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceItemStatementValidateBeforeCall(String itemId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling replaceItemStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling replaceItemStatement(Async)");
        }

        // verify the required parameter 'addItemStatementRequest' is set
        if (addItemStatementRequest == null) {
            throw new ApiException("Missing the required parameter 'addItemStatementRequest' when calling replaceItemStatement(Async)");
        }

        return replaceItemStatementCall(itemId, statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Replace a single Statement of an Item
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response replaceItemStatement(String itemId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = replaceItemStatementWithHttpInfo(itemId, statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Replace a single Statement of an Item
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> replaceItemStatementWithHttpInfo(String itemId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = replaceItemStatementValidateBeforeCall(itemId, statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a single Statement of an Item (asynchronously)
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param itemId The ID of the required Item (required)
     * @param statementId The ID of a Statement on an Item (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Item&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceItemStatementAsync(String itemId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceItemStatementValidateBeforeCall(itemId, statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replacePropertyStatement
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replacePropertyStatementCall(String propertyId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addItemStatementRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/statements/{statement_id}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replacePropertyStatementValidateBeforeCall(String propertyId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling replacePropertyStatement(Async)");
        }

        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling replacePropertyStatement(Async)");
        }

        // verify the required parameter 'addItemStatementRequest' is set
        if (addItemStatementRequest == null) {
            throw new ApiException("Missing the required parameter 'addItemStatementRequest' when calling replacePropertyStatement(Async)");
        }

        return replacePropertyStatementCall(propertyId, statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Replace a single Statement of a Property
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response replacePropertyStatement(String propertyId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = replacePropertyStatementWithHttpInfo(propertyId, statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Replace a single Statement of a Property
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> replacePropertyStatementWithHttpInfo(String propertyId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = replacePropertyStatementValidateBeforeCall(propertyId, statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a single Statement of a Property (asynchronously)
     * This endpoint is also accessible through &#x60;/statements/{statement_id}&#x60;
     * @param propertyId The ID of the required Property (required)
     * @param statementId The ID of a Statement on a Property (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the &#x60;ETag&#x60; header field refers to the Property&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replacePropertyStatementAsync(String propertyId, String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = replacePropertyStatementValidateBeforeCall(propertyId, statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceStatement
     * @param statementId The ID of a Statement (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the ETag header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceStatementCall(String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addItemStatementRequest;

        // create path and map variables
        String localVarPath = "/statements/{statement_id}"
            .replace("{" + "statement_id" + "}", localVarApiClient.escapeString(statementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceStatementValidateBeforeCall(String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'statementId' is set
        if (statementId == null) {
            throw new ApiException("Missing the required parameter 'statementId' when calling replaceStatement(Async)");
        }

        // verify the required parameter 'addItemStatementRequest' is set
        if (addItemStatementRequest == null) {
            throw new ApiException("Missing the required parameter 'addItemStatementRequest' when calling replaceStatement(Async)");
        }

        return replaceStatementCall(statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Replace a single Statement
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return AddItemStatement201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the ETag header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddItemStatement201Response replaceStatement(String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<AddItemStatement201Response> localVarResp = replaceStatementWithHttpInfo(statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Replace a single Statement
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;AddItemStatement201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the ETag header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddItemStatement201Response> replaceStatementWithHttpInfo(String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = replaceStatementValidateBeforeCall(statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a single Statement (asynchronously)
     * This endpoint is also accessible through &#x60;/entities/items/{item_id}/statements/{statement_id}&#x60; and &#x60;/entities/properties/{property_id}/statements/{statement_id}&#x60;
     * @param statementId The ID of a Statement (required)
     * @param addItemStatementRequest Payload containing a Wikibase Statement object and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Wikibase Statement. Please note that the value of the ETag header field refers to the subject&#39;s revision ID. </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceStatementAsync(String statementId, AddItemStatementRequest addItemStatementRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<AddItemStatement201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceStatementValidateBeforeCall(statementId, addItemStatementRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<AddItemStatement201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
