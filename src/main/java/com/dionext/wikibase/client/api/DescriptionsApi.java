/*
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dionext.wikibase.client.api;

import com.dionext.wikibase.client.model.DeleteSitelinkRequest;
import com.dionext.wikibase.client.model.PatchItemRequest;
import com.dionext.wikibase.client.model.ReplaceItemDescriptionRequest;
import com.dionext.wikibase.client.ApiCallback;
import com.dionext.wikibase.client.ApiClient;
import com.dionext.wikibase.client.ApiException;
import com.dionext.wikibase.client.ApiResponse;
import com.dionext.wikibase.client.Configuration;
import com.dionext.wikibase.client.Pair;

import com.google.gson.reflect.TypeToken;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DescriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DescriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DescriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteItemDescription
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The description was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemDescriptionCall(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSitelinkRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/descriptions/{language_code}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemDescriptionValidateBeforeCall(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteItemDescription(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling deleteItemDescription(Async)");
        }

        return deleteItemDescriptionCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, deleteSitelinkRequest, _callback);

    }

    /**
     * Delete an Item&#39;s description in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The description was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String deleteItemDescription(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        ApiResponse<String> localVarResp = deleteItemDescriptionWithHttpInfo(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, deleteSitelinkRequest);
        return localVarResp.getData();
    }

    /**
     * Delete an Item&#39;s description in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The description was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteItemDescriptionWithHttpInfo(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteItemDescriptionValidateBeforeCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, deleteSitelinkRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Item&#39;s description in a specific language (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The description was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemDescriptionAsync(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemDescriptionValidateBeforeCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, deleteSitelinkRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePropertyDescription
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The description was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyDescriptionCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSitelinkRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/descriptions/{language_code}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyDescriptionValidateBeforeCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling deletePropertyDescription(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling deletePropertyDescription(Async)");
        }

        return deletePropertyDescriptionCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, deleteSitelinkRequest, _callback);

    }

    /**
     * Delete a Property&#39;s description in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The description was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String deletePropertyDescription(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        ApiResponse<String> localVarResp = deletePropertyDescriptionWithHttpInfo(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, deleteSitelinkRequest);
        return localVarResp.getData();
    }

    /**
     * Delete a Property&#39;s description in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The description was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> deletePropertyDescriptionWithHttpInfo(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyDescriptionValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, deleteSitelinkRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Property&#39;s description in a specific language (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param deleteSitelinkRequest Edit payload containing edit metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The description was deleted </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyDescriptionAsync(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, DeleteSitelinkRequest deleteSitelinkRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyDescriptionValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, deleteSitelinkRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemDescription
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemDescriptionCall(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/descriptions/{language_code}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemDescriptionValidateBeforeCall(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemDescription(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling getItemDescription(Async)");
        }

        return getItemDescriptionCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve an Item&#39;s description in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String getItemDescription(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<String> localVarResp = getItemDescriptionWithHttpInfo(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Item&#39;s description in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> getItemDescriptionWithHttpInfo(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getItemDescriptionValidateBeforeCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Item&#39;s description in a specific language (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemDescriptionAsync(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemDescriptionValidateBeforeCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemDescriptionWithFallback
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 307 </td><td> The specified resource has temporarily moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemDescriptionWithFallbackCall(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/descriptions_with_language_fallback/{language_code}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemDescriptionWithFallbackValidateBeforeCall(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemDescriptionWithFallback(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling getItemDescriptionWithFallback(Async)");
        }

        return getItemDescriptionWithFallbackCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve an Item&#39;s description in a specific language, with language fallback
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 307 </td><td> The specified resource has temporarily moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String getItemDescriptionWithFallback(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<String> localVarResp = getItemDescriptionWithFallbackWithHttpInfo(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Item&#39;s description in a specific language, with language fallback
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 307 </td><td> The specified resource has temporarily moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> getItemDescriptionWithFallbackWithHttpInfo(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getItemDescriptionWithFallbackValidateBeforeCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Item&#39;s description in a specific language, with language fallback (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 307 </td><td> The specified resource has temporarily moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemDescriptionWithFallbackAsync(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemDescriptionWithFallbackValidateBeforeCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemDescriptions
     * @param itemId The ID of the required Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemDescriptionsCall(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/descriptions"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemDescriptionsValidateBeforeCall(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemDescriptions(Async)");
        }

        return getItemDescriptionsCall(itemId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve an Item&#39;s descriptions
     * 
     * @param itemId The ID of the required Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, String> getItemDescriptions(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getItemDescriptionsWithHttpInfo(itemId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Item&#39;s descriptions
     * 
     * @param itemId The ID of the required Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getItemDescriptionsWithHttpInfo(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getItemDescriptionsValidateBeforeCall(itemId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Item&#39;s descriptions (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemDescriptionsAsync(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemDescriptionsValidateBeforeCall(itemId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyDescription
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyDescriptionCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/descriptions/{language_code}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyDescriptionValidateBeforeCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getPropertyDescription(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling getPropertyDescription(Async)");
        }

        return getPropertyDescriptionCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a Property&#39;s description in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String getPropertyDescription(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<String> localVarResp = getPropertyDescriptionWithHttpInfo(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Property&#39;s description in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> getPropertyDescriptionWithHttpInfo(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDescriptionValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Property&#39;s description in a specific language (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyDescriptionAsync(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyDescriptionValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyDescriptionWithFallback
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 307 </td><td> The specified resource has temporarily moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyDescriptionWithFallbackCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/descriptions_with_language_fallback/{language_code}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyDescriptionWithFallbackValidateBeforeCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getPropertyDescriptionWithFallback(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling getPropertyDescriptionWithFallback(Async)");
        }

        return getPropertyDescriptionWithFallbackCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a Property&#39;s description in a specific language, with language fallback
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 307 </td><td> The specified resource has temporarily moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String getPropertyDescriptionWithFallback(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<String> localVarResp = getPropertyDescriptionWithFallbackWithHttpInfo(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Property&#39;s description in a specific language, with language fallback
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 307 </td><td> The specified resource has temporarily moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> getPropertyDescriptionWithFallbackWithHttpInfo(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDescriptionWithFallbackValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Property&#39;s description in a specific language, with language fallback (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s description in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 307 </td><td> The specified resource has temporarily moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyDescriptionWithFallbackAsync(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyDescriptionWithFallbackValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyDescriptions
     * @param propertyId The ID of the required Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyDescriptionsCall(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/descriptions"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyDescriptionsValidateBeforeCall(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getPropertyDescriptions(Async)");
        }

        return getPropertyDescriptionsCall(propertyId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a Property&#39;s descriptions
     * 
     * @param propertyId The ID of the required Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, String> getPropertyDescriptions(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getPropertyDescriptionsWithHttpInfo(propertyId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Property&#39;s descriptions
     * 
     * @param propertyId The ID of the required Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getPropertyDescriptionsWithHttpInfo(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDescriptionsValidateBeforeCall(propertyId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Property&#39;s descriptions (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyDescriptionsAsync(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyDescriptionsValidateBeforeCall(propertyId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchItemDescriptions
     * @param itemId The ID of the required Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to an Item&#39;s descriptions and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid descriptions </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchItemDescriptionsCall(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchItemRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/descriptions"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchItemDescriptionsValidateBeforeCall(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling patchItemDescriptions(Async)");
        }

        // verify the required parameter 'patchItemRequest' is set
        if (patchItemRequest == null) {
            throw new ApiException("Missing the required parameter 'patchItemRequest' when calling patchItemDescriptions(Async)");
        }

        return patchItemDescriptionsCall(itemId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Change an Item&#39;s descriptions
     * 
     * @param itemId The ID of the required Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to an Item&#39;s descriptions and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid descriptions </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, String> patchItemDescriptions(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = patchItemDescriptionsWithHttpInfo(itemId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Change an Item&#39;s descriptions
     * 
     * @param itemId The ID of the required Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to an Item&#39;s descriptions and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid descriptions </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> patchItemDescriptionsWithHttpInfo(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = patchItemDescriptionsValidateBeforeCall(itemId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change an Item&#39;s descriptions (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to an Item&#39;s descriptions and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid descriptions </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchItemDescriptionsAsync(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchItemDescriptionsValidateBeforeCall(itemId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPropertyDescriptions
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to a Property&#39;s descriptions and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid descriptions </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPropertyDescriptionsCall(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchItemRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/descriptions"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPropertyDescriptionsValidateBeforeCall(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling patchPropertyDescriptions(Async)");
        }

        // verify the required parameter 'patchItemRequest' is set
        if (patchItemRequest == null) {
            throw new ApiException("Missing the required parameter 'patchItemRequest' when calling patchPropertyDescriptions(Async)");
        }

        return patchPropertyDescriptionsCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Change a Property&#39;s descriptions
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to a Property&#39;s descriptions and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid descriptions </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, String> patchPropertyDescriptions(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = patchPropertyDescriptionsWithHttpInfo(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Change a Property&#39;s descriptions
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to a Property&#39;s descriptions and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid descriptions </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> patchPropertyDescriptionsWithHttpInfo(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = patchPropertyDescriptionsValidateBeforeCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change a Property&#39;s descriptions (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to a Property&#39;s descriptions and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s descriptions by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid descriptions </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPropertyDescriptionsAsync(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPropertyDescriptionsValidateBeforeCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceItemDescription
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param replaceItemDescriptionRequest Payload containing Item description in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly added description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceItemDescriptionCall(String itemId, String languageCode, ReplaceItemDescriptionRequest replaceItemDescriptionRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceItemDescriptionRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/descriptions/{language_code}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceItemDescriptionValidateBeforeCall(String itemId, String languageCode, ReplaceItemDescriptionRequest replaceItemDescriptionRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling replaceItemDescription(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling replaceItemDescription(Async)");
        }

        // verify the required parameter 'replaceItemDescriptionRequest' is set
        if (replaceItemDescriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'replaceItemDescriptionRequest' when calling replaceItemDescription(Async)");
        }

        return replaceItemDescriptionCall(itemId, languageCode, replaceItemDescriptionRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Add / Replace an Item&#39;s description in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param replaceItemDescriptionRequest Payload containing Item description in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly added description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String replaceItemDescription(String itemId, String languageCode, ReplaceItemDescriptionRequest replaceItemDescriptionRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<String> localVarResp = replaceItemDescriptionWithHttpInfo(itemId, languageCode, replaceItemDescriptionRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Add / Replace an Item&#39;s description in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param replaceItemDescriptionRequest Payload containing Item description in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly added description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> replaceItemDescriptionWithHttpInfo(String itemId, String languageCode, ReplaceItemDescriptionRequest replaceItemDescriptionRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = replaceItemDescriptionValidateBeforeCall(itemId, languageCode, replaceItemDescriptionRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add / Replace an Item&#39;s description in a specific language (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param replaceItemDescriptionRequest Payload containing Item description in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly added description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call replaceItemDescriptionAsync(String itemId, String languageCode, ReplaceItemDescriptionRequest replaceItemDescriptionRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceItemDescriptionValidateBeforeCall(itemId, languageCode, replaceItemDescriptionRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPropertyDescription
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param replaceItemDescriptionRequest Payload containing Property description in the specified language and edit metadata (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly added description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call setPropertyDescriptionCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, ReplaceItemDescriptionRequest replaceItemDescriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceItemDescriptionRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/descriptions/{language_code}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPropertyDescriptionValidateBeforeCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, ReplaceItemDescriptionRequest replaceItemDescriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling setPropertyDescription(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling setPropertyDescription(Async)");
        }

        return setPropertyDescriptionCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, replaceItemDescriptionRequest, _callback);

    }

    /**
     * Add / Replace a Property&#39;s description in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param replaceItemDescriptionRequest Payload containing Property description in the specified language and edit metadata (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly added description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public String setPropertyDescription(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, ReplaceItemDescriptionRequest replaceItemDescriptionRequest) throws ApiException {
        ApiResponse<String> localVarResp = setPropertyDescriptionWithHttpInfo(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, replaceItemDescriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Add / Replace a Property&#39;s description in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param replaceItemDescriptionRequest Payload containing Property description in the specified language and edit metadata (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly added description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<String> setPropertyDescriptionWithHttpInfo(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, ReplaceItemDescriptionRequest replaceItemDescriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = setPropertyDescriptionValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, replaceItemDescriptionRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add / Replace a Property&#39;s description in a specific language (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param replaceItemDescriptionRequest Payload containing Property description in the specified language and edit metadata (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly added description </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call setPropertyDescriptionAsync(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, ReplaceItemDescriptionRequest replaceItemDescriptionRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPropertyDescriptionValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, replaceItemDescriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
