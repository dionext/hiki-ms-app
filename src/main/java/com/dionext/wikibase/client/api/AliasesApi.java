/*
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dionext.wikibase.client.api;

import com.dionext.wikibase.client.ApiCallback;
import com.dionext.wikibase.client.ApiClient;
import com.dionext.wikibase.client.ApiException;
import com.dionext.wikibase.client.ApiResponse;
import com.dionext.wikibase.client.Configuration;
import com.dionext.wikibase.client.Pair;

import com.google.gson.reflect.TypeToken;


import com.dionext.wikibase.client.model.AddItemAliasesInLanguageRequest;
import com.dionext.wikibase.client.model.PatchItemRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AliasesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AliasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AliasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addItemAliasesInLanguage
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param addItemAliasesInLanguageRequest Payload containing a list of Item aliases in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly created list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addItemAliasesInLanguageCall(String itemId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addItemAliasesInLanguageRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/aliases/{language_code}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemAliasesInLanguageValidateBeforeCall(String itemId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling addItemAliasesInLanguage(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling addItemAliasesInLanguage(Async)");
        }

        // verify the required parameter 'addItemAliasesInLanguageRequest' is set
        if (addItemAliasesInLanguageRequest == null) {
            throw new ApiException("Missing the required parameter 'addItemAliasesInLanguageRequest' when calling addItemAliasesInLanguage(Async)");
        }

        return addItemAliasesInLanguageCall(itemId, languageCode, addItemAliasesInLanguageRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Create / Add an Item&#39;s aliases in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param addItemAliasesInLanguageRequest Payload containing a list of Item aliases in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly created list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public List<String> addItemAliasesInLanguage(String itemId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<List<String>> localVarResp = addItemAliasesInLanguageWithHttpInfo(itemId, languageCode, addItemAliasesInLanguageRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Create / Add an Item&#39;s aliases in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param addItemAliasesInLanguageRequest Payload containing a list of Item aliases in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly created list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> addItemAliasesInLanguageWithHttpInfo(String itemId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addItemAliasesInLanguageValidateBeforeCall(itemId, languageCode, addItemAliasesInLanguageRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create / Add an Item&#39;s aliases in a specific language (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param addItemAliasesInLanguageRequest Payload containing a list of Item aliases in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly created list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The specified Item was redirected </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addItemAliasesInLanguageAsync(String itemId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemAliasesInLanguageValidateBeforeCall(itemId, languageCode, addItemAliasesInLanguageRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addPropertyAliasesInLanguage
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param addItemAliasesInLanguageRequest Payload containing a list of Wikibase aliases in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly created list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyAliasesInLanguageCall(String propertyId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addItemAliasesInLanguageRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/aliases/{language_code}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPropertyAliasesInLanguageValidateBeforeCall(String propertyId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling addPropertyAliasesInLanguage(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling addPropertyAliasesInLanguage(Async)");
        }

        // verify the required parameter 'addItemAliasesInLanguageRequest' is set
        if (addItemAliasesInLanguageRequest == null) {
            throw new ApiException("Missing the required parameter 'addItemAliasesInLanguageRequest' when calling addPropertyAliasesInLanguage(Async)");
        }

        return addPropertyAliasesInLanguageCall(propertyId, languageCode, addItemAliasesInLanguageRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Create / Add a Property&#39;s aliases in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param addItemAliasesInLanguageRequest Payload containing a list of Wikibase aliases in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly created list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public List<String> addPropertyAliasesInLanguage(String propertyId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<List<String>> localVarResp = addPropertyAliasesInLanguageWithHttpInfo(propertyId, languageCode, addItemAliasesInLanguageRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Create / Add a Property&#39;s aliases in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param addItemAliasesInLanguageRequest Payload containing a list of Wikibase aliases in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly created list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> addPropertyAliasesInLanguageWithHttpInfo(String propertyId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addPropertyAliasesInLanguageValidateBeforeCall(propertyId, languageCode, addItemAliasesInLanguageRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create / Add a Property&#39;s aliases in a specific language (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param addItemAliasesInLanguageRequest Payload containing a list of Wikibase aliases in the specified language and edit metadata (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 201 </td><td> The newly created list of aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyAliasesInLanguageAsync(String propertyId, String languageCode, AddItemAliasesInLanguageRequest addItemAliasesInLanguageRequest, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPropertyAliasesInLanguageValidateBeforeCall(propertyId, languageCode, addItemAliasesInLanguageRequest, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemAliases
     * @param itemId The ID of the required Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemAliasesCall(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/aliases"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemAliasesValidateBeforeCall(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemAliases(Async)");
        }

        return getItemAliasesCall(itemId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve an Item&#39;s aliases
     * 
     * @param itemId The ID of the required Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return Map&lt;String, List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, List<String>> getItemAliases(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<Map<String, List<String>>> localVarResp = getItemAliasesWithHttpInfo(itemId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Item&#39;s aliases
     * 
     * @param itemId The ID of the required Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<String>>> getItemAliasesWithHttpInfo(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getItemAliasesValidateBeforeCall(itemId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Item&#39;s aliases (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemAliasesAsync(String itemId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<Map<String, List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemAliasesValidateBeforeCall(itemId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemAliasesInLanguage
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemAliasesInLanguageCall(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/aliases/{language_code}"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemAliasesInLanguageValidateBeforeCall(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getItemAliasesInLanguage(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling getItemAliasesInLanguage(Async)");
        }

        return getItemAliasesInLanguageCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve an Item&#39;s aliases in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public List<String> getItemAliasesInLanguage(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<List<String>> localVarResp = getItemAliasesInLanguageWithHttpInfo(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Item&#39;s aliases in a specific language
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getItemAliasesInLanguageWithHttpInfo(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getItemAliasesInLanguageValidateBeforeCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Item&#39;s aliases in a specific language (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 308 </td><td> The specified resource has permanently moved to the indicated location </td><td>  * Location - The URI of the newly created Statement <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getItemAliasesInLanguageAsync(String itemId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemAliasesInLanguageValidateBeforeCall(itemId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyAliases
     * @param propertyId The ID of the required Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyAliasesCall(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/aliases"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyAliasesValidateBeforeCall(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getPropertyAliases(Async)");
        }

        return getPropertyAliasesCall(propertyId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a Property&#39;s aliases
     * 
     * @param propertyId The ID of the required Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return Map&lt;String, List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, List<String>> getPropertyAliases(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<Map<String, List<String>>> localVarResp = getPropertyAliasesWithHttpInfo(propertyId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Property&#39;s aliases
     * 
     * @param propertyId The ID of the required Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<String>>> getPropertyAliasesWithHttpInfo(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPropertyAliasesValidateBeforeCall(propertyId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Property&#39;s aliases (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyAliasesAsync(String propertyId, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<Map<String, List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyAliasesValidateBeforeCall(propertyId, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyAliasesInLanguage
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyAliasesInLanguageCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/aliases/{language_code}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()))
            .replace("{" + "language_code" + "}", localVarApiClient.escapeString(languageCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyAliasesInLanguageValidateBeforeCall(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getPropertyAliasesInLanguage(Async)");
        }

        // verify the required parameter 'languageCode' is set
        if (languageCode == null) {
            throw new ApiException("Missing the required parameter 'languageCode' when calling getPropertyAliasesInLanguage(Async)");
        }

        return getPropertyAliasesInLanguageCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a Property&#39;s aliases in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public List<String> getPropertyAliasesInLanguage(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<List<String>> localVarResp = getPropertyAliasesInLanguageWithHttpInfo(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Property&#39;s aliases in a specific language
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getPropertyAliasesInLanguageWithHttpInfo(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPropertyAliasesInLanguageValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Property&#39;s aliases in a specific language (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param languageCode The requested resource language (required)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases in a specific language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 304 </td><td> The specified resource has not been modified since last provided revision number or date </td><td>  * ETag - Last entity revision number <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyAliasesInLanguageAsync(String propertyId, String languageCode, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyAliasesInLanguageValidateBeforeCall(propertyId, languageCode, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchItemAliases
     * @param itemId The ID of the required Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to an Item&#39;s aliases and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid Aliases </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchItemAliasesCall(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchItemRequest;

        // create path and map variables
        String localVarPath = "/entities/items/{item_id}/aliases"
            .replace("{" + "item_id" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchItemAliasesValidateBeforeCall(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling patchItemAliases(Async)");
        }

        // verify the required parameter 'patchItemRequest' is set
        if (patchItemRequest == null) {
            throw new ApiException("Missing the required parameter 'patchItemRequest' when calling patchItemAliases(Async)");
        }

        return patchItemAliasesCall(itemId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Change an Item&#39;s aliases
     * 
     * @param itemId The ID of the required Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to an Item&#39;s aliases and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return Map&lt;String, List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid Aliases </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, List<String>> patchItemAliases(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<Map<String, List<String>>> localVarResp = patchItemAliasesWithHttpInfo(itemId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Change an Item&#39;s aliases
     * 
     * @param itemId The ID of the required Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to an Item&#39;s aliases and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid Aliases </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<String>>> patchItemAliasesWithHttpInfo(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = patchItemAliasesValidateBeforeCall(itemId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change an Item&#39;s aliases (asynchronously)
     * 
     * @param itemId The ID of the required Item (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to an Item&#39;s aliases and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Item&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid Aliases </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchItemAliasesAsync(String itemId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<Map<String, List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchItemAliasesValidateBeforeCall(itemId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPropertyAliases
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to a Property&#39;s aliases and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid Aliases </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPropertyAliasesCall(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchItemRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}/aliases"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPropertyAliasesValidateBeforeCall(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling patchPropertyAliases(Async)");
        }

        // verify the required parameter 'patchItemRequest' is set
        if (patchItemRequest == null) {
            throw new ApiException("Missing the required parameter 'patchItemRequest' when calling patchPropertyAliases(Async)");
        }

        return patchPropertyAliasesCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Change a Property&#39;s aliases
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to a Property&#39;s aliases and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return Map&lt;String, List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid Aliases </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public Map<String, List<String>> patchPropertyAliases(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<Map<String, List<String>>> localVarResp = patchPropertyAliasesWithHttpInfo(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Change a Property&#39;s aliases
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to a Property&#39;s aliases and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid Aliases </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<String>>> patchPropertyAliasesWithHttpInfo(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = patchPropertyAliasesValidateBeforeCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change a Property&#39;s aliases (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest Payload containing a JSON Patch document to be applied to a Property&#39;s aliases and edit metadata (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Property&#39;s aliases by language </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in invalid Aliases </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPropertyAliasesAsync(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<Map<String, List<String>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPropertyAliasesValidateBeforeCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<String>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
