/*
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dionext.wikibase.client.api;

import com.dionext.wikibase.client.model.AddProperty201Response;
import com.dionext.wikibase.client.model.AddPropertyRequest;
import com.dionext.wikibase.client.model.PatchItemRequest;
import com.dionext.wikibase.client.ApiCallback;
import com.dionext.wikibase.client.ApiClient;
import com.dionext.wikibase.client.ApiException;
import com.dionext.wikibase.client.ApiResponse;
import com.dionext.wikibase.client.Configuration;
import com.dionext.wikibase.client.Pair;

import com.google.gson.reflect.TypeToken;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PropertiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addProperty
     * @param addPropertyRequest Payload containing a Wikibase Property and edit metadata (required)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyCall(AddPropertyRequest addPropertyRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPropertyRequest;

        // create path and map variables
        String localVarPath = "/entities/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPropertyValidateBeforeCall(AddPropertyRequest addPropertyRequest, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addPropertyRequest' is set
        if (addPropertyRequest == null) {
            throw new ApiException("Missing the required parameter 'addPropertyRequest' when calling addProperty(Async)");
        }

        return addPropertyCall(addPropertyRequest, authorization, _callback);

    }

    /**
     * Create a Wikibase Property
     * 
     * @param addPropertyRequest Payload containing a Wikibase Property and edit metadata (required)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return AddProperty201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddProperty201Response addProperty(AddPropertyRequest addPropertyRequest, String authorization) throws ApiException {
        ApiResponse<AddProperty201Response> localVarResp = addPropertyWithHttpInfo(addPropertyRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * Create a Wikibase Property
     * 
     * @param addPropertyRequest Payload containing a Wikibase Property and edit metadata (required)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;AddProperty201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddProperty201Response> addPropertyWithHttpInfo(AddPropertyRequest addPropertyRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addPropertyValidateBeforeCall(addPropertyRequest, authorization, null);
        Type localVarReturnType = new TypeToken<AddProperty201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Wikibase Property (asynchronously)
     * 
     * @param addPropertyRequest Payload containing a Wikibase Property and edit metadata (required)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 422 </td><td> The edit request violates data policy </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyAsync(AddPropertyRequest addPropertyRequest, String authorization, final ApiCallback<AddProperty201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPropertyValidateBeforeCall(addPropertyRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<AddProperty201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProperty
     * @param propertyId The ID of the required Property (required)
     * @param fields Comma-separated list of fields to include in each response object. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyCall(String propertyId, List<String> fields, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "_fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }


        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyValidateBeforeCall(String propertyId, List<String> fields, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling getProperty(Async)");
        }

        return getPropertyCall(propertyId, fields, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);

    }

    /**
     * Retrieve a single Wikibase Property by ID
     * 
     * @param propertyId The ID of the required Property (required)
     * @param fields Comma-separated list of fields to include in each response object. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return AddProperty201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddProperty201Response getProperty(String propertyId, List<String> fields, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        ApiResponse<AddProperty201Response> localVarResp = getPropertyWithHttpInfo(propertyId, fields, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization);
        return localVarResp.getData();
    }

    /**
     * Retrieve a single Wikibase Property by ID
     * 
     * @param propertyId The ID of the required Property (required)
     * @param fields Comma-separated list of fields to include in each response object. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @return ApiResponse&lt;AddProperty201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddProperty201Response> getPropertyWithHttpInfo(String propertyId, List<String> fields, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(propertyId, fields, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, null);
        Type localVarReturnType = new TypeToken<AddProperty201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a single Wikibase Property by ID (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param fields Comma-separated list of fields to include in each response object. (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifModifiedSince Conditionally perform the request only if the resource has been modified after the specified date (optional)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param authorization Make authenticated request using a provided bearer token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The request cannot be processed </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyAsync(String propertyId, List<String> fields, List<String> ifNoneMatch, String ifModifiedSince, List<String> ifMatch, String ifUnmodifiedSince, String authorization, final ApiCallback<AddProperty201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(propertyId, fields, ifNoneMatch, ifModifiedSince, ifMatch, ifUnmodifiedSince, authorization, _callback);
        Type localVarReturnType = new TypeToken<AddProperty201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchProperty
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest  (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Property </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPropertyCall(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchItemRequest;

        // create path and map variables
        String localVarPath = "/entities/properties/{property_id}"
            .replace("{" + "property_id" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }


        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }


        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPropertyValidateBeforeCall(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling patchProperty(Async)");
        }

        // verify the required parameter 'patchItemRequest' is set
        if (patchItemRequest == null) {
            throw new ApiException("Missing the required parameter 'patchItemRequest' when calling patchProperty(Async)");
        }

        return patchPropertyCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);

    }

    /**
     * Change a single Wikibase Property by ID
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest  (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return AddProperty201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Property </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public AddProperty201Response patchProperty(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<AddProperty201Response> localVarResp = patchPropertyWithHttpInfo(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * Change a single Wikibase Property by ID
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest  (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @return ApiResponse&lt;AddProperty201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Property </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public ApiResponse<AddProperty201Response> patchPropertyWithHttpInfo(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = patchPropertyValidateBeforeCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<AddProperty201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change a single Wikibase Property by ID (asynchronously)
     * 
     * @param propertyId The ID of the required Property (required)
     * @param patchItemRequest  (required)
     * @param ifMatch Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers (optional)
     * @param ifNoneMatch Conditionally perform the request only if the resource has been modified since the specified entity revision numbers (optional)
     * @param ifUnmodifiedSince Conditionally perform the request only if the resource has not been modified after the specified date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single Wikibase Property </td><td>  * ETag - Last entity revision number <br>  * Last-Modified - Last modified date <br>  * X-Authenticated-User - Optional username of the user making the request <br>  </td></tr>
        <tr><td> 400 </td><td> The provided JSON Patch request is invalid </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 403 </td><td> The access to resource was denied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 409 </td><td> The provided JSON Patch cannot be applied </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 412 </td><td> The condition defined by a conditional request header is not fulfilled </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Applying the provided JSON Patch results in an invalid Property </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
        <tr><td> 500 </td><td> An unexpected error has occurred </td><td>  * Content-Language - Language code of the language in which error message is provided <br>  </td></tr>
     </table>
     */
    public okhttp3.Call patchPropertyAsync(String propertyId, PatchItemRequest patchItemRequest, List<String> ifMatch, List<String> ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<AddProperty201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPropertyValidateBeforeCall(propertyId, patchItemRequest, ifMatch, ifNoneMatch, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<AddProperty201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
