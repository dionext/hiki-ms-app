/*
 * Wikibase REST API
 * OpenAPI definition of Wikibase REST API
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dionext.wikibase.client.model;

import java.util.Objects;

import com.dionext.wikibase.client.JSON;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-23T19:13:51.135774Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner {
  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  @javax.annotation.Nullable
  private String hash;

  public static final String SERIALIZED_NAME_PARTS = "parts";
  @SerializedName(SERIALIZED_NAME_PARTS)
  @javax.annotation.Nullable
  private List<AddItemRequestAllOfItemStatementsValueInnerAllOfQualifiersInner> parts = new ArrayList<>();

  public AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner() {
  }

  public AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner(
     String hash
  ) {
    this();
    this.hash = hash;
  }

  /**
   * Hash of the Reference
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }



  public AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner parts(@javax.annotation.Nullable List<AddItemRequestAllOfItemStatementsValueInnerAllOfQualifiersInner> parts) {
    this.parts = parts;
    return this;
  }

  public AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner addPartsItem(AddItemRequestAllOfItemStatementsValueInnerAllOfQualifiersInner partsItem) {
    if (this.parts == null) {
      this.parts = new ArrayList<>();
    }
    this.parts.add(partsItem);
    return this;
  }

  /**
   * Get parts
   * @return parts
   */
  @javax.annotation.Nullable
  public List<AddItemRequestAllOfItemStatementsValueInnerAllOfQualifiersInner> getParts() {
    return parts;
  }

  public void setParts(@javax.annotation.Nullable List<AddItemRequestAllOfItemStatementsValueInnerAllOfQualifiersInner> parts) {
    this.parts = parts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner addItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner = (AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner) o;
    return Objects.equals(this.hash, addItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner.hash) &&
        Objects.equals(this.parts, addItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner.parts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, parts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner {\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hash");
    openapiFields.add("parts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner is not found in the empty JSON string", AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if (jsonObj.get("parts") != null && !jsonObj.get("parts").isJsonNull()) {
        JsonArray jsonArrayparts = jsonObj.getAsJsonArray("parts");
        if (jsonArrayparts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parts` to be an array in the JSON string but got `%s`", jsonObj.get("parts").toString()));
          }

          // validate the optional field `parts` (array)
          for (int i = 0; i < jsonArrayparts.size(); i++) {
            AddItemRequestAllOfItemStatementsValueInnerAllOfQualifiersInner.validateJsonElement(jsonArrayparts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner>() {
           @Override
           public void write(JsonWriter out, AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner
   * @throws IOException if the JSON string is invalid with respect to AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner
   */
  public static AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner.class);
  }

  /**
   * Convert an instance of AddItemRequestAllOfItemStatementsValueInnerAllOfReferencesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

